---
AWSTemplateFormatVersion: 2010-09-09
Description: Enderscraft Public VPC Stack
Metadata:
  License: CC BY-NC 4.0
  Author: Josh Enders <josh.enders@gmail.com>

Parameters:
  ParameterVPCCIDR:
    Description: VPC CIDR Block
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "10.0.0.0/24"

  ParameterSubnetPublicCIDR:
    Description: Public Subnet CIDR Block
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "10.0.0.0/26"

  ParameterAdminCIDR:
    Description: CIDR Block which will be able to connect to RCON
    Type: String
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "0.0.0.0/0"

  ParameterMinecraftPort:
    Description: Minecraft port
    Type: String
    AllowedPattern: '\d{1,5}'
    Default: "25565"

  ParameterRCONPort:
    Description: RCON port
    Type: String
    AllowedPattern: '\d{1,5}'
    Default: "25575"

  ParameterHostedZone:
    Description: Non-Fully Qualified Domain Name (no trailing dot)
    Type: String
    AllowedPattern: '[a-zA-Z0-9-.]+'

  ParameterIAMUser:
    Description: IAM User
    Type: String
    AllowedPattern: '[a-z]+'
    Default: "enderscraft"

  ParameterLogRetentionDays:
    Description: Days of log retention for tasks (1|3|5|7|14|30|60|90|120|150|180|365|400|545|731|1827|3653)
    Type: String
    AllowedPattern: '^(1|3|5|7|14|30|60|90|120|150|180|365|400|545|731|1827|3653)$'
    Default: "7"

  ParameterBudgetAmountUSD:
    Description: Allowance of USD to spend per unit of time
    Type: String
    AllowedPattern: '^\d+(\.\d+)?$'
    Default: "10"

  ParameterBudgetFrequency:
    Description: "Period of time to calculate budget (DAILY|MONTHLY|QUARTERLY|ANNUALLY)"
    Type: String
    AllowedPattern: '^(ANNUALLY|DAILY|MONTHLY|QUARTERLY)$'
    Default: "MONTHLY"

  ParameterEmailAddress:
    Description: Email address for budget notifications
    Type: String
    AllowedPattern: '[a-zA-Z0-9-.+%]+@[a-zA-Z0-9-.]+'


Resources:
  # Budget
  Budget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: !Sub ${AWS::StackName}-Budget
        BudgetLimit:
          Amount: !Ref ParameterBudgetAmountUSD
          Unit: USD
        TimeUnit: !Ref ParameterBudgetFrequency
        BudgetType: COST
        CostFilters:
          TagKeyValue:
            - !Sub aws:cloudformation:stack-name$${AWS::StackName}
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 50
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref ParameterEmailAddress

        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 75
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref ParameterEmailAddress

        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: 95
          Subscribers:
            - SubscriptionType: EMAIL
              Address: !Ref ParameterEmailAddress


  # DNS
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name:
        Ref: ParameterHostedZone
      HostedZoneTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-HostedZone

  RecordSetApexRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Comment: Enderscraft DDNS record
      Name: !Sub ${ParameterHostedZone}
      ResourceRecords: 
        - 127.0.0.1
      TTL: 60
      Type: A


  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ParameterVPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC


  # Network Gateways
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  # Network ACL
  NetworkAclSubnetPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NetworkAclSubnetPublic

  # Network ACL - Inbound
  NetworkAclEntryInbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclSubnetPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  # Network ACL - Outbound
  NetworkAclEntryOutbound100:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclSubnetPublic
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0


  # Public Subnet
  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref ParameterSubnetPublicCIDR
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SubnetPublic

  NetworkAclAssociationSubnetPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: SubnetPublic
      NetworkAclId:
        Ref: NetworkAclSubnetPublic

  RouteTableSubnetPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RouteTableSubnetPublic

  RouteSubnetPublicDefault:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableSubnetPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociationSubnetPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTableSubnetPublic


  # Security Groups
  SecurityGroupFargateTasks:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for Fargate Tasks
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: !Sub Allow inbound connections on port ${ParameterMinecraftPort}
          FromPort: !Ref ParameterMinecraftPort
          IpProtocol: tcp
          ToPort: !Ref ParameterMinecraftPort

        - CidrIp: !Ref ParameterAdminCIDR
          Description: !Sub Allow inbound connections on port ${ParameterRCONPort}
          FromPort: !Ref ParameterRCONPort
          IpProtocol: tcp
          ToPort: !Ref ParameterRCONPort
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SecurityGroupFargateTasks


  # IAM
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref ParameterIAMUser
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IAMUser

  IAMRoleECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for executing ECS Tasks
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: ecsTaskExecutionRole
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IAMRoleECSTaskExecutionRole

  IAMRoleLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for executing DDNS Lambdas
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      RoleName: LambdaExecutionRole
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaExecutionRole

  IAMPolicyFargateCLI:
    Type: AWS::IAM::Policy
    DependsOn: IAMUser
    Properties:
      PolicyName: FargateCLIPolicy
      Users: 
        - !Ref ParameterIAMUser
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecs:DescribeTasks
              - ecs:StopTask
            Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/fargate/*

          - Effect: Allow
            Action:
              - ecs:RunTask
            Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*

          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:FilterLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/fargate/*

          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ecs:CreateCluster
              - ecs:DescribeTaskDefinition
              - ecs:ListTasks
              - ecs:RegisterTaskDefinition
            Resource: "*"

          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:PassRole
              - sts:AssumeRole
            Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole

  IAMPolicyDDNSLambdaExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DDNSLambdaExecutionPolicy
      Roles:
        - !Ref IAMRoleLambdaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ecs:DescribeTasks
            Resource: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/fargate/*

          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - route53:ListHostedZones
              - route53:ChangeResourceRecordSets
            Resource: "*"

          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enderscraft*


  # ECR
  ECRRepository:
    Type: AWS::ECR::Repository
    DependsOn: IAMRoleECSTaskExecutionRole
    Properties:
      RepositoryName: !Sub ${AWS::StackName}
      ImageScanningConfiguration:
        scanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only one untagged image, expire all others",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                  }
                }
            ]
          }
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:GetDownloadUrlForLayer
              - ecr:ListImages
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECRRepository


  # Events
  EventsRuleDDNS:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers DNS update lambda for enderscraft tasks
      EventBusName: default
      EventPattern:
        source: 
          - aws.ecs
        detail-type:
          - ECS Task State Change
        detail:
          clusterArn:
            - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/fargate
          lastStatus:
            - RUNNING
      Name: !Sub ${AWS::StackName}_ddns_rule
      State: ENABLED
      Targets: 
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}_ddns
          Id: LambdaTarget
          InputPath: $.detail


  # Lambda
  LambdaFunctionDDNS:
    Type: AWS::Lambda::Function
    Properties:
      Description: Updates DNS record for running tasks
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt IAMRoleLambdaExecutionRole.Arn
      FunctionName: !Sub ${AWS::StackName}_ddns
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          D=dict
          import boto3 as E,logging as B
          from sys import exit
          C='${ParameterHostedZone}.'
          J='${AWS::StackName}'
          I=60
          A=B.getLogger()
          for G in A.handlers:G.setFormatter(B.Formatter('%(aws_request_id)s [%(levelname)s] %(message)s'))
          A=B.getLogger(__name__)
          A.setLevel(B.DEBUG)
          def K(arn):
            def A(arn):A=E.client('ecs');B=A.describe_tasks(cluster='fargate',tasks=[arn]);return B.get('tasks',[D()])[0].get('attachments',[D()])[0].get('details',[D()])[1].get('value')
            def B(eni):A=E.client('ec2');B=A.describe_network_interfaces(NetworkInterfaceIds=[eni]);return B.get('NetworkInterfaces',[D()])[0].get('Association',D()).get('PublicIp')
            C=A(arn);return B(C)
          def F(answer):
            J='Name';D={'Changes':[{'Action':'UPSERT','ResourceRecordSet':{J:C,'Type':'A','TTL':I,'ResourceRecords':[{'Value':answer}]}}]};F=E.client('route53');G=F.list_hosted_zones().get('HostedZones',list());B=None
            for H in G:
              if H.get(J)==C:B=H.get('Id').split('/')[2];A.info(f"Found zone_id: '{B}' for '{C}'")
            if not B:A.error(f"'{C}' not found in hosted_zones: '{G}'");exit(1)
            A.info(f"Route53 request: '{D}'");return F.change_resource_record_sets(HostedZoneId=B,ChangeBatch=D)
          def lambda_handler(event,_):
            I='RUNNING';B=event;L=B.get('taskDefinitionArn');D=B.get('lastStatus');E=B.get('desiredStatus')
            if J not in L:A.warning(f"Ignored event");return
            elif D==I and E=='STOPPED':A.info(f"Task stop event");C=F('127.0.0.1');A.info(f"Route53 response: '{C}'");return
            elif D==I and E==I:A.info(f"Task start event");G=B.get('taskArn');H=K(G);A.info(f"ipv4_addr: '{H}', task_arn: '{G}'");C=F(H);A.info(f"Route53 response: '{C}'")
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LambdaFunctionDDNS

  LambdaPermissionDDNS:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunctionDDNS.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com


  # # S3
  # S3Bucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub ${AWS::StackName}-lambda-functions
  #     AccessControl: BucketOwnerFullControl
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-S3Bucket
  #     VersioningConfiguration:
  #       Status: Suspended

  # LogGroup
  LogGroupFargateTask:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /fargate/task/${AWS::StackName}
      RetentionInDays: !Ref ParameterLogRetentionDays

  LogGroupFargateService:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /fargate/service/${AWS::StackName}
      RetentionInDays: !Ref ParameterLogRetentionDays

  LogGroupLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}_ddns
      RetentionInDays: !Ref ParameterLogRetentionDays


# Ouputs
Outputs:
  ns1:
    Value: !Select [0, !GetAtt HostedZone.NameServers]
  ns2:
    Value: !Select [1, !GetAtt HostedZone.NameServers]
  ns3:
    Value: !Select [2, !GetAtt HostedZone.NameServers]
  ns4:
    Value: !Select [3, !GetAtt HostedZone.NameServers]
